[
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1104",
        "title": "Concepts des langages de programmation",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Van Roy Peter"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises des compétences de base en programmation visées par les cours LSINC1101/LINFO1101 et les notions sur l'algorithmique et les structures de données simples visées par le cours LSINC1402/LEPL1402. Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Paradigmes de programmation (y compris fonctionnel, orienté objet, dataflow et multi-agent) Sémantique formelle et techniques de raisonnement Abstraction procédurale (programmation d'ordre supérieur) Abstraction de données (y compris orienté objet et types de données abstraits) Programmation concurrente (y compris état partagé, passage de messages et dataflow déterministe) Programmation symbolique (y compris conception algorithmique)",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Bachelier en Sciences de l'Ingénieur, orientation ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA 1.1, 1.2 AA 2.3, 2.4, 2.5, 2.6, 2.7 AA 4.2, 4.3, 4.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I2, S1.I3, S1.I5 S2.2, S2.3, S2.4 S5.3, S5.4, S5.5 Les étudiants ayant suivi avec fruit ce cours seront capables de spécifier les problèmes, les diviser dans leurs étapes de base, et concevoir des algorithmes et des abstractions pour les résoudre ; choisir le bon paradigme de programmation et écrire un programme dans ce paradigme pour résoudre un problème ; utiliser la sémantique formelle pour expliquer l'exactitude du programme ; écrire de petits programmes concurrents dans le paradigme du dataflow déterministe. penser à l'aide d'abstractions (raisonner correctement sur un système qui comprend plusieurs couches d'abstractions, et définir de nouvelles abstractions pour simplifier la résolution d'un problème)",
        "content": "Le but de ce cours est d'élargir et approfondir les connaissances en programmation acquises dans les précédents cours.  Ce cours aborde les sujets suivants: Le cours donne un cadre uniforme pour tous les concepts de programmation, organisés en paradigmes de programmation. Le cours donne une sémantique formelle et des techniques de raisonnement pour tous les paradigmes présentés. Le cours donne une introduction au lambda calcul comme base de la programmation fonctionnelle et la programmation d'ordre supérieur. La programmation d'ordre supérieur est utilisée comme principe organisateur pour construire des abstractions procédurales. La programmation concurrente est présentée en deux formes, le dataflow déterministe et la concurrence à passage de messages. L'abstraction de données est présentée dans sa forme générale et avec ses deux formes principales, la programmation orientée-objet et les types de données abstraits. La programmation symbolique et la conception d'algorithmes sont utilisés partout dans le cours. Cinq paradigmes de programmation importants sont abordés dans ce cours: la programmation fonctionnelle, la programmation orientée objet, la programmation dataflow déterministe, les acteurs dataflow et la programmation avec objets actifs (multi-agent). Des exemples d'applications pratiques sont présentés pour tous les concepts et tous les paradigmes.",
        "teaching_methods": "Cours magistral chaque semaine Séances de travaux pratiques en salle informatique chaque semaine, pour résoudre des problèmes simplifiés en utilisant les concepts vu au cours Un grand projet de conception et d'implémentation pour appliquer ces concepts dans le cadre d'une application plus complexe.",
        "assessment_methods": "Test dispensatoire 25% (vers la 7e semaine) Projet 25% Examen final (50%) (ou 75% si on refait la partie du test) Le projet est obligatoire et se fait pendant le quadrimestre.  Il ne peut être fait qu'une fois et il compte pour toute l'année académique.",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1361",
        "title": "Intelligence artificielle",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teaching_language": "Français",
        "prerequisites": "Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Résolution de problèmes par la recherche: formulation des problèmes, stratégies de recherche informées et non informées, recherche locale, évaluation du comportement et coût estimé,  applications Satisfaction de contraintes: problèmes de formulation, traçage et propagation de contraintes, applications Jeux et recherche contradictoire : algorithme de minimax et élagage Alpha-Beta, applications Logique propositionnelle: représentation des connaissances, inférence et  raisonnement, applications Logique du premier ordre: représentation des connaissances, inférence et raisonnement, chaînage avant et arrière, systèmes à base de règles, applications Planification: langages des problèmes de planification, méthodes de recherche, graphes de planification, planification hiérarchique, extensions, applications AI, philosophie et éthique: \"les machines savent-elles agir intelligemment ?\", \"les machines savent-elles vraiment penser ?\", l'éthique et les risques de l'intelligence artificielle, l'avenir de l'intelligence artificielle",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.2-4 INFO5.2, INFO5.5 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.M4 SINF2.2-4 SINF5.2, SINF5.5 SINF6.1, SINF6.4 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M4 1SINF2.2-4 1SINF5.2, 1SINF5.5 1SINF6.1, 1SINF6.4 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer et exploiter à bon escient les concepts de base de la représentation de connaissances, de la résolution de problèmes et des méthodes de raisonnement, tels qu'utilisés en intelligence artificielle évaluer l'applicabilité, les forces et les faiblesses de la représentation des connaissances, de la résolution de problèmes et des méthodes de raisonnement dans le cadre de la résolution de problèmes concrets d'ingénierie développer des systèmes intelligents par l'assemblage de solutions à des problèmes concrets discuter du rôle de la représentation des connaissances, de la résolution de problèmes et de méthodes de raisonnement dans la conception et la réalisation de systèmes intelligents Les étudiants auront développé des compétences méthodologiques et opérationnelles.  En particulier, ils auront développé leur capacité à : maîtriser un nouveau langage de programmation utilisant principalement un tutoriel en ligne faire face à des délais et à la compétitivité lorsque l'on développe un application qui se veut la plus efficace.",
        "content": "Introduction Recherche Recherche informée Recherche locale Recherche avec adversaire Problème de satisfaction de contraintes Agent logique Logique de premier ordre et inférence Planification classique Planification dans le monde réel Apprendre à partir d'exemples Fondements philosophiques, le présent et l'avenir de l'AI",
        "teaching_methods": "apprentissage par problèmes Apprendre en faisant 5 missions (de deux semaines) équipes de deux étudiants Cours magistral (1 heure / semaine) Feed-back sur les missions clôturées (1 / 2 heure) Discussion de la mission en cours (1 / 2 heure)",
        "assessment_methods": "Examen : 70% Missions: 30%. Les travaux doivent être personnels (équipe de 2). Pas de collaboration entre les groupes. Aucune copie à partir d'Internet. Tricherie = 0 / 20 pour toutes les missions. En cas, d'échec des missions la pondération de cette partie sera plus importante. Les travaux ne peuvent être réalisés que pendant le quadrimestre du cours. Il n'est pas possible de refaire les travaux durant un autre semestre ou pour la session de septembre.",
        "other_info": "Bibliographie : Stuart Russell, Peter Norvig, Artificial Intelligence : a Modern Approach , 3nd Edition, 2010, 1132 pages, Prentice Hall transparents en ligne",
        "online_resources": "https://moodleucl.uclouvain.be/course/view.php?id=8082",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1104",
        "title": "Concepts des langages de programmation",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Van Roy Peter"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises des compétences de base en programmation visées par les cours LINFO1101 ou LEPL1401 et les notions sur l'algorithmique et les structures de données simples visées par le cours LEPL1402. Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Paradigmes de programmation : programmation fonctionnelle, programmation orientée-objet et programmation déclarative dataflow ; Sémantique formelle et techniques de raisonnement sur des programmes ; Langage noyau et machine abstraite ; Abstractions de données et modélisation orientée-objet ; Algorithmes récursifs et programmation avec invariants en exploitant des structures de données linéaires et arborescentes ; Analyse de la complexité temporelle d'un algorithme et de la complexité spatiale d'une structure de données ; Non-déterminisme, ordonnancement et équité ; Mise en oeuvre de programmes de complexité moyenne avec un accent sur les méthodes de tests et de validation de programmes.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier en Sciences de l'Ingénieur, orientation ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA 1.1, 1.2 AA 2.3, 2.4, 2.5, 2.6, 2.7 AA 4.2, 4.3, 4.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I2, S1.I3, S1.I5 S2.2, S2.3, S2.4 S5.3, S5.4, S5.5 Les étudiants ayant suivi avec fruit ce cours seront capables de spécifier les problèmes, les diviser dans leurs étapes de base, et concevoir des algorithmes et des abstractions pour les résoudre ; choisir le bon paradigme de programmation et écrire un programme dans ce paradigme pour résoudre un problème ; utiliser la sémantique formelle pour expliquer l'exactitude du programme ; écrire de petits programmes concurrents dans le paradigme du dataflow déterministe. penser à l'aide d'abstractions (raisonner correctement sur un système qui comprend plusieurs couches d'abstractions, et définir de nouvelles abstractions pour simplifier la résolution d'un problème)",
        "content": "Le but de ce cours est d'élargir et approfondir les connaissances en programmation acquises dans les précédents cours.  Le cours aborde les sujets suivants: Le cours donne un cadre uniforme pour tous les concepts de programmation, organisés en paradigmes de programmation. Le cours donne une sémantique formelle et des techniques de raisonnement pour tous les paradigmes présentés. Le cours donne une introduction au lambda calcul comme base de la programmation fonctionnelle et la programmation d'ordre supérieur. La programmation d'ordre supérieur est utilisée comme principe organisateur pour construire des abstractions procédurales. La programmation concurrente est présentée en deux formes, le dataflow déterministe et la concurrence à passage de messages. L'abstraction de données est présentée dans sa forme générale et avec ses deux formes principales, la programmation orientée-objet et les types de données abstraits. La programmation symbolique et la conception d'algorithmes sont utilisés partout dans le cours. Cinq paradigmes de programmation importants sont abordés dans ce cours: la programmation fonctionnelle, la programmation orientée objet, la programmation dataflow déterministe, les acteurs dataflow et la programmation avec objets actifs (multi-agent) Des exemples d'applications pratiques sont présentés pour tous les concepts et tous les paradigmes.",
        "teaching_methods": "Cours magistral chaque semaine (en présentiel ou distanciel, selon les règles en vigueur) Séances de travaux pratiques en salle informatique chaque semaine, pour résoudre des problèmes simplifiés en utilisant les concepts vu au cours Un grand projet de conception et d'implémentation pour appliquer ces concepts dans le cadre d'une application plus complexe.",
        "assessment_methods": "Test dispensatoire 25% (vers la 7e semaine) Projet 25% Examen final (50%) (ou 75% si on refait la partie du test) Le projet est obligatoire et se fait pendant le quadrimestre.  Il ne peut être fait qu'une fois et il compte pour toute l'année académique.  Le test dispensatoire (qui est optionnel) et l'examen final seront faits en présentiel ou distanciel, selon les règles en vigueur.  Le titulaire se réserve le droit d'interroger un étudiant oralement lors de l'examen final dans certains cas.",
        "other_info": "Prérequis: Cours de programmation de seconde année Informatique 2 (LEPL1402) ou équivalent.",
        "online_resources": "LINFO1104 Moodle.",
        "bibliography": "Peter Van Roy et Seif Haridi, PROGRAMMATION: Concepts, techniques et modèles, Dunod, 2007 Peter Van Roy et Seif Haridi, Concepts, Techniques, and Models of Computer Programming, MIT Press, 2004",
        "course_materials": "Concept, Techniques, and Models of Computer Programming",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2132",
        "title": "Languages and translators",
        "credits": "6.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Sadre Ramin"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Méthodes d'analyse de langages \"context-free\", méthodes ascendantes et méthodes descendantes. Applications Générateurs d'analyseurs lexicaux et syntaxiques Sémantique statique et grammaires attribuées Méthode de définition de traduction du code source en code cible et génération du code cible Machine virtuelle et byte-code (JVM) Garbage Collection et gestion mémoire Domain Specific Languages (DSL)",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.2-4 INFO5.2, INFO5.4, INFO5.5 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.M2 SINF2.2-4 SINF5.2, SINF5.4, SINF5.5 SINF6.1, SINF6.4 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M2 1SINF2.2-4 1SINF5.2, 1SINF5.4, 1SINF5.5 1SINF6.1, 1SINF6.4 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer de façon pratique la structure des compilateurs pour des langages algorithmiques concevoir et implémenter un compilateur pour un langage pratique qui résout un problème à intérêt intrinsèque montrer l'intérêt des techniques de compilation dans la résolution de problèmes dans d'autres domaines Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils ont développé leur capacité à traiter avec rigueur une problématique en justifiant et validant chaque étape d'un projet pour pouvoir s'appuyer sur celle-ci pour mettre en oeuvre la suivante expliquer de façon pratique comment un code-source (Java) est finalement traduit en byte-code. expliquer les mécanismes d'exécution du byte-code par une JVM expliquer la gestion mémoire lors de l'exécution d'un programme expliquer le fonctionnement des mécanismes de garbage collection",
        "content": "Le cours présente la théorie et la pratique de l'implémentation des langages de programmation, ainsi que l'architecture des compilateurs. Nous passerons en revue les composants standards d'un compilateur, du front-end (parsing, analyse lexicale) au back-end (génération de code). Pendant le cours, les étudiants implémenteront un compilateur pour un nouveau langage de programmation.",
        "teaching_methods": "Le cours consiste en une série de vidéos préenregistrées, de leçons traditionnelles, de séances de questions-réponses et de séances de laboratoire. Un projet sera réalisé avec plusieurs échéances réparties sur le quadrimestre.",
        "assessment_methods": "Session de juin : L'évaluation se compose de deux composantes: Le projet (réalisé en groupe) compte pour 60% de la note finale du cours. Un examen écrit compte pour 40%. Session d'août : Si l'étudiant.e n'a pas réussi le cours lors de la première session (c'est-à-dire qu'il/elle n'a pas obtenu au moins 10/20 pour la note finale), il/elle est autorisée à refaire les composantes (projet ou examen ou les deux) de l'évaluation pour lesquelles il/elle n'a pas obtenu au moins 50% des points respectifs. Il/elle conservera les points de la composante qu'il/elle a réussie (le cas échéant). Les mêmes pondérations que lors de la session de juin sont appliquées pour le calcul de la note finale. Les deux sessions : Le professeur peut demander à un.e étudiant.e de passer un examen oral supplémentaire en complément de l'examen et/ou des activités du projet, dans des cas incluant, mais non limités à, des problèmes techniques, ou des suspicions d'irrégularités.",
        "other_info": "Préalables : LINFO122 : Méthodes rigoureuses de conception de programmes LINFO1121 : langage de programmation de haut niveau, algorithmique et structures de données LINFO1101 : Logique et structures discrètes LINFO1252: Systèmes informatiques",
        "online_resources": "Teams et/ou Moodle",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1252",
        "title": "Systèmes informatiques",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Riviere Etienne"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les compétences de programmation en langage C visées par LEPL1503 et les notions algorithmiques visées par le LSINC1402/LEPL1402.",
        "topics_covered": "Niveaux d'abstraction dans les systèmes informatiques Architectures de processeurs Langage-machine, langage d'assemblage et langage C Rôles et fonctions des systèmes d'exploitation Utilisation des fonctions d'un système d'exploitation dans les applications Processus et threads : concepts, problèmes et solutions Systèmes multi-processeurs",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2.4-7 AA4.1, AA4.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I4 S2.2-4 S5.2, S5.5 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer quelles fonctions sont remplies par les différents niveaux de la hiérarchie allant de la machine physique au niveau sur lequel s'appuient les applications expliquer les principales architectures de systèmes d'exploitation et processeurs, ainsi que les principaux dispositifs et techniques utilisés pour les réaliser utiliser et mettre en oeuvre de manière efficace les différents services et fonctions offertes par les processeurs et les systèmes d'exploitation",
        "content": "Le cours présente l'organisation et l'utilisation d'un système informatique, ainsi que les principes et la mise en œuvre des systèmes d'exploitation.",
        "teaching_methods": "- cours magistraux; - exercice et feedback automatisé utilisant la plateform Inginious; - exercices et séances tutorées. Certaines activités peuvent prendre place en ligne.",
        "assessment_methods": "Session de janvier : - Participation aux séances et exercices annoncés comme obligatoires (10%) - Evaluation continue et mini-projets (30%) - Examen (60%) Session de septembre : - La note de participation compte et ne peut pas être refaite (10%) - Réalisation d'exercices et de mini-projet(s) de façon individuelle (30%) - Examen (60%) Les activités d'évaluation continue sont toutes des activités certificatives et les règles de déontologie en termes de plagiat, triche, etc. s'y appliquent scrictement. Les activités d'évaluation continue sont toutes strictement individuelles sauf mention explicite du professeur. Pour les activités autorisées en binôme, toute collaboration avec des personnes en dehors du binôme d'étudiant constitue un cas de triche. L'utilisation d'IA générative est autorisée pour corriger la grammaire, l'orthographe et le style de texte préalablement écrit par un·e étudiant·e mais interdite pour générer du texte à partir d'une instruction ou pour générer du code. Des solutions de détection de plagiat sont utilisés de manière systématique. L'évaluation continue donnera lieu à une note globale unique communiquée aux étudiants avant l'examen de janvier (ou aout), sur 8 points, incluant la note de participation. Tout non-respect des consignes en matière de déontologie entrainera une note de 0/8 pour l'évaluation continue et la dénonciation des étudiants concernés aux autorités. Le professeur titulaire peut demander un examen oral complémentaire à toute activité certificative du cours, incluant l'ensemble des activités d'évaluation continue et/ou l'examen. La convocation à un examen additionnel est obligatoire et fait partie intégrante du processus d'évaluation. Des activités formatives sont susceptibles d'être considérés comme certificatives et prendront alors une partie ou tout du poids de l'examen dans la note si les circonstances le demandent. L'examen peut utiliser tout ou partie des modalités d'évaluation suivantes en proportion variable. Cette proportion est annoncée lors de l'examen : restitution de connaissances sous forme de question de cours ouvertes. application de connaissances sous forme de problème. QCM et QRM appliquant le principe de \"standard setting\" : une réponse incorrecte à une question ne conduit pas à une pénalité, et la partie ne peut pas être quotée négativement, mais un seuil minimal (annoncé) de réponses correctes est nécessaire avant d'accumuler effectivement des points pour cette partie de l'examen.",
        "online_resources": "Le lien vers le syllabus est disponible sur l'espace Moodle du cours.",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2262",
        "title": "Machine Learning : classification and evaluation",
        "credits": "6.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Dupont Pierre"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Apprentissage par recherche, par biais inductif Combinaisons de décisions M inimisation d'une fonction de perte, descente de gradient Evaluation des performances Apprentissage par mémorisation de prototypes Apprentissage probabiliste Classification non supervisée",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.3-4 INFO5.3-5 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.M4 SINF2.3-4 SINF5.3-5 SINF6.1, SINF6.4 Les étudiants ayant suivi avec fruit ce cours seront capables de comprendre et appliquer des techniques standard pour construire des programmes informatiques qui s'améliorent automatiquement avec l'expérience, en particulier pour les problèmes de classification évaluer la qualité d'un modèle appris pour une tâche donnée évaluer les performances relatives de plusieurs algorithmes d'apprentissage justifier de l'utilisation d'un algorithme d'apprentissage particulier en prennant en compte la nature des données, le problème d'apprentissage et une mesure de performance pertinente utiliser, adapter et étendre des  logiciels d'apprentissage Les étudiants auront développé des compétences méthodologiques et opérationnelles.  En particulier, ils auront développé leur capacité à : exploiter la documentation technique pour faire un usage efficace d'un package préexistant, communiquer des résultats de test sous forme synthétique en utilisant par exemple des graphiques.",
        "content": "Apprentissage d'arbres de décision: ID3, C4.5, CART, Forêts aléatoires Discriminants linéaires: perceptrons, descente de gradient et minimisation des moindres carrés Hyperplans de marge maximale et séparateurs à vaste marge Apprentissage profond Probabilités et statistiques en apprentissage automatique Évaluation des performances: tests d'hypothèses, comparaisons d'algorithmes d'apprentissage, analyse ROC Classificateurs gaussiens, discriminants de Fisher Apprentissage bayésien: maximum de vraisemblance, maximum a posteriori, classifieur optimal, classifieur bayésien naïf Apprentissage par mémorisation de prototypes: k plus proches voisins, algorithme LVQ",
        "teaching_methods": "Cours magistraux Projets incluant questions théoriques et applications pratiques. Ces projets sont implémentés dans le langage python. Ils sont soumis et évalués sur la plateforme Inginious .",
        "assessment_methods": "Calcul de la note globale pour le cours En première session , la note globale du cours est exclusivement basée sur les projets soumis et évalués durant le quadrimestre. Cette note globale est calculée, juste après la correction du dernier projet, comme une moyenne pondérée des 5 projets du cours, selon la pondération suivante : projet 1 = 10 % projet 2 = 15 % projet 3 = 10 % projet 4 = 15 % projet 5 = 50 % En seconde session , les projets ne sont pas ré-évalués et ne peuvent donc pas être soumis à nouveau. Les notes des projets 1 à 4 sont conservées telles quelles, alors que le projet 5 est remplacé par un examen écrit à livre fermé. Cet examen s'effectue, par défaut, sur papier ou, le cas échéant, sur ordinateur. La note globale est calculée avec la même pondération qu'en première session, l'examen écrit comptant en particulier pour 50% de la note globale (en remplacement de celle du projet 5). Règles concernant les collaborations entre étudiants et l'usage de ressources externes Une étude collaborative entre les étudiant.e.s est encouragée via un forum d'échanges sur Moodle. Chaque étudiant.e doit néanmoins soumettre une solution personnelle pour chaque projet. Le recours à des ressources publiques (p.ex. stackoverflow.com), ce-inclus des IA génératives (p.ex. chatGPT) est autorisé pour autant que chaque (fragment de) code soumis par l'étudiant.e mentionne toutes les ressources utilisées. La diffusion ou l'échange entre étudiants de (fragments de) code ne sont pas autorisés par quelque moyen que ce soit (GitHub, Facebook, Discord, ...) et ce même après la date limite de remise des projets. Le non-respect de ces règles sera considéré comme un plagiat et/ou tricherie et sera sanctionné conformément au Règlement Général des Etudes et des Examens. Ces règles sont exposées et détaillées lors du premier cours (voir site Moodle du cours).",
        "online_resources": "moodle.uclouvain.be/course/view.php?id=1836",
        "bibliography": "Des ouvrages complémentaires sont recommandés sur le site Moodle du cours. Additional textbooks are recommended on the Moodle site for this course.",
        "course_materials": "Les supports obligatoires sont constitués de l'ensemble des documents (transparents des cours magistraux, énoncés des travaux pratiques, compléments, ...) disponibles depuis le site Moodle du cours. Required teaching material include all documents (lecture slides, project assignments, complements, ...) available from the Moodle website for this course.",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lbir1212",
        "title": "Probabilités et statistiques (I)",
        "credits": "4.00",
        "hours": "30.0 h + 15.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Bogaert Patrick"
        ],
        "teaching_language": "Français",
        "prerequisites": "Le contenu de ce cours s’appuie sur les connaissances et compétences acquises dans le cadre des cours LBIR1110 Il est donc recommandé d’avoir réussi ce cours avant de s’inscrire au cours LBIR1212 Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Introduction au calcul des probabilités - Variables aléatoires discrètes et continues: fonction de probabilités et de densité, fonction de répartition, espérance, variance et autres caractéristiques - Principales distributions statistiques - Couples de variables aléatoires et vecteurs aléatoires: distribution conjointe, distributions marginales et conditionnelles, indépendance, covariance et corrélation, espérance et variance conditionnelle - Introduction à la statistique - Statistiques descriptives - Notions d'estimateurs et qualités des estimateurs - Inférence concernant une moyenne et une variance: estimateurs, distributions d'échantillonnage - Notion d'intervalle de confiance à une moyenne.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 a. Contribution de l'activité au référentiel AA (AA du programme) 1.1, 2.1 b. Formulation spécifique pour cette activité des AA du programme ( maximum 10 ) A la fin de cette activité, l'étudiant est capable de ·       Nommer, décrire et expliquer les concepts théoriques relatifs à la théorie des probabilités ; ·       Manipuler les expressions mathématiques de manière formelle et avec une notation rigoureuse en vue d'en déduire de nouvelles expressions utiles ou des résultats  théoriques recherchés ; ·       Reformuler l'énoncé textuel d'un problème dans un formalisme mathématique et probabiliste non ambigu, en utilisant les concepts et outils théoriques adéquats ; ·       Résoudre un problème appliqué en suivant une approche déductive basée sur la manipulation correcte et utile des expressions ; ·       Valider la cohérence interne de la formalisation et de la solution d'un problème de calcul des probabilités sur base des contraintes logiques induites par la théorie.",
        "content": "Notions d'évènement et de probabilité. Principaux théorèmes du calcul des probablités. Variables aléatoires discrètes et continues: fonction de probabilités et de densité, fonction de répartition, espérance, variance. Principales distributions statistiques univariées - Couples de variables et vecteurs aléatoires: distribution conjointe, distributions marginales et conditionnelles, indépendance, covariance et corrélation, espérance et variance conditionnelle. Introduction à l'usage des nombres aléatoires.",
        "teaching_methods": "Cours en auditoire et séances d'exercices supervisées",
        "assessment_methods": "L'examen est écrit et à livre ouvert (uniquement avec le support original). Il consiste en des exercices à résoudre et sa durée est d'environ 3 heures.",
        "other_info": "Le cours fait appel à un support particulier qui est payant et jugé obligatoire, à savoir : P. Bogaert (2020). Probabilités pour scientifiques et ingénieurs (2ème éd). Editions De Boeck.",
        "online_resources": "Moodle",
        "course_materials": "P. Bogaert (2020). Probabilités pour scientifiques et ingénieurs (2ème éd). Editions De Boeck.",
        "responsible_entity": "AGRO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lepl2211",
        "title": "Business issues introduction",
        "credits": "3.00",
        "hours": "30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Gailly Benoît"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Présentation des dimensions principales d’une entreprise (stratégiques, marketing, opérationnelles, organisationnelles et humaines, financières et liées à la performance) et de sa gestion responsable, à travers l’analyse d’un plan d’affaires et l’application à des cas concrets.",
        "other_info": "Ce cours est enseigné en anglais.  Merci de consulter la version anglaise du descriptif.",
        "responsible_entity": "EPL"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1211",
        "title": "Probabilités et statistiques",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teaching_language": "Français",
        "prerequisites": "Les concepts mathématiques nécessaires sont - logique du premier ordre, - théorie des ensembles, - Analyse : fonctions d'une ou plusieurs variables réelles : dérivation et intégration limites, suites et séries. En terme de compétence, il est nécessaire que les étudiants sachent réaliser une démonstration et puisse manipuler le langage mathématique de manière formelle. Prérequis : LSINC1111, LSINC1112 et LSINC1113 Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Il s'agit ici d'obtenir pour l'étudiant une compréhension profonde et exacte des concepts fondamentaux ainsi qu'une formation aux raisonnements probabilistes et statistiques. Le formalisme mathématique est simplifié mais présent.  Il s'agit d'utiliser la théorie de la mesure de manière intuitive pour prolonger le concept de dénombrement vers une définition analytique des lois de probabilité. La matière de base du calcul des probabilités est introduite par quelques heures de statistiques descriptive (traitement d'un tableau de nombre, calcul de moyenne, variance,...) qui donnent lieu à des exercices pratiques avec R. Les principes de probabilité nécessaires pour une introduction à la statistique inférentielle sont également définis. On insistera tout particulièrement sur les techniques de base à savoir l'estimation de paramètres et les tests d'hypothèse.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : . de réaliser une statistique descriptive et de poser un test d'hypothèse et de le résoudre, afin d'interpréter la réalité masquée par le jeu de données, en fonction, d'utiliser à bon escient le langage R pour manipuler ses données, d'utiliser les fondements de l'analyse combinatoire et du calcul des probabilités, pour déterminer les probabilités associées à différents événements, d'utiliser les fondements de l'analyse fonctionnelle, de l'algèbre linéaire et des mathématiques discrètes pour déterminer les lois de probabilités de phénomènes aléatoires, de manipuler les lois théoriques usuelles pour expliciter des comportements, de manipuler les lois associées à des variables aléatoires étudiées simultanément.",
        "content": "I Statistique descriptive 1 1 Statistique descriptive univariée 1.1 Conditions d’analyse 1.2 Représentations graphiques 1.3 Caractéristiques numériques . 2 Statistique descriptive bivariée 2.1 Conditions d’analyse 2.2 Représentations graphiques 2.3 La notion de liaison entre deux variables 2.4 La régression linéaire II Probabilités 3 Analyse combinatoire 3.1 Le principe fondamental de dénombrement 3.2 La notion d’arrangement 3.3 La notion de permutation 3.4 La notion de combinaison 4 Le calcul des probabilités 4.1 Ensemble fondamental et événement 4.2 Un événement est un ensemble 4.3 Trois axiomes comme point de départ 4.4 Probabilités sur des ensembles finis 4.5 Probabilité conditionnelle 4.6 Indépendance 5 Variables aléatoires 5.1 Définitions fondamentales 5.2 Variables aléatoires discrètes 5.3 Variables aléatoires continues 5.4 Fonction génératrice et transformée de Laplace 6 Lois de probabilité usuelles 6.1 Variable aléatoire de Bernouilli 6.2 Variable aléatoire binomiale 6.3 Variable aléatoire de Poisson 6.4 Variable aléatoire géométrique 6.5 Variable aléatoire binomiale négative 6.6 Variable aléatoire hypergéométrique 6.7 Variable aléatoire uniforme discrète 6.8 Variable aléatoire uniforme continue 6.9 Variable aléatoire normale 6.10 Variable aléatoire exponentielle 6.11 Variable aléatoire d’Erlang 6.12 Approximation d’une loi binomiale 6.13 Fonction génératrice et transformée de Laplace 7 Variables aléatoires simultanées 7.1 Variables aléatoires liées : distribution 7.2 Variables aléatoires indépendantes 7.3 Somme de variables aléatoires 7.4 Distributions conditionnelles 7.5 Théorèmes limites III Statistique inférentielle 8 Théorie de l’estimation 8.1 Estimation ponctuelle 8.2 Estimation par intervalle de confiance 9 Tests d’hypothèse 9.1 Principe général 9.2 Tests sur les moyennes 9.3 Tests sur les variances 9.4 Test chi-carrée IV Appendix A Introduction au logiciel R A.1 Installation et découverte du logiciel R A.2 Premier pas avec le logiciel R A.3 La classe vecteur A.4 La classe matrice A.5 La classe data.frame A.6 Les données sous R",
        "teaching_methods": "Cours théorique magistral (30h), accompagné de séances d'exercices  (30h)",
        "assessment_methods": "La note finale sur 20 est obtenue à l'issue d'un examen écrit individuel.",
        "other_info": "Ce cours se base sur divers ouvrages de base en statistiques et en probabilité, et en particulier sur  F. Bertrand et M. Maumy-Bertrand.Initiation à la statistique avec R. Dunod, 2010,  les chapitres 1 à 8 de S.M. Ross. Initiation aux probabilités. Traduction de la septième édition américaine. Presses polytechniques et universitaires romandes, 2009 et enfin, sur l'ouvrage suivant : M. Lejeune.  Statistique. La théorie et ses applications. Deuxième édition. Springer, 2010.",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1123",
        "title": "Calculabilité, logique et complexité",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Deville Yves"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les compétences en programmation (LSINC1101), algorithmique (ESINC1103) et langage de programmation visées dans le cours LSINC1402 et en compléments de mathématiques LSINC1113.",
        "topics_covered": "Théorie de la calculabilité : problèmes et algorithmes, fonctions calculables et non calculables, réduction, classes de problèmes indécidables (théorème de Rice), théorème du point fixe, thèse de Church-Turing Logique : logique des propositions et logique des prédicats (syntaxe, sémantique, preuve, quantificateurs, model checking, résolution) Modèles de calculabilité : machine de Turing Théorie de la complexité : classes de complexité, NP-complétude, théorème de Cook, résolution de problèmes NP-complets.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I3, S1.G1 S2.2 Les étudiants ayant suivi avec fruit ce cours seront capables de reconnaître, expliquer et identifier les limites du traitement de l'information par un ordinateur; expliquer et exploiter à bon escient les principaux modèles de calculabilité en explicitant leurs fondements, leurs différences et leurs similitudes; convertir des affirmations du langage courant en expressions logiques en utilisant la syntaxe et la sémantique de la logique des propositions ou des prédicats reconnaître, identifier et appréhender les problèmes non calculables ainsi que les problèmes intrinsèquement complexes. Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils auront développé leur capacité à avoir un regard critique sur les performances et la capacité des systèmes informatiques.",
        "content": "Introduction Ensembles énumérables Calculabilité: résultats fondamentaux Modèles de calculabilité Logique des propositioin Introduction à la complexité algorithmique Classes de complexité",
        "teaching_methods": "Ce cours peut être donné selon différentes modalités présentielles et distancielles.  Ceux-ci pourront notamment contenir des cours magistraux, des lectures, des préparations, des séances d'exercices ainsi que du travail individuel ou en groupe.",
        "assessment_methods": "Différents modes d'évaluations pourront être organisés : évaluation continue, travaux notés, participation, examen.  L'examen sera écrit, mais en cas de doute de l'enseignant sur la note à attribuer à un étudiant, celui-ci pourra être interrogé complémentairement en oral.  En fonction du nombre d'étudiants, l'examen de septembre pourrait être oral.",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1121",
        "title": "Algorithmique et structures de données",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Schaus Pierre"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises la maîtrîse de la programmation et de la conception de programmes dans un langage orienté-objet tel que Java, la connaissance de structures de données élémentaires et des notions de récursion et de complexité calculatoire telles que visées par le cours LEPL1402. Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Mesures de complexité d'un algorithme et méthodes d'analyse de complexité. Algorithmes de tris et recherche dichotomiques. Structures de données de base (listes, arbres, arbres binaires de recherche) : étude de leurs propriétés abstraites, de leurs représentations concrètes, de leur application et des principaux algorithmes qui les manipulent. Structures de données avancées (union-find, tables de hachage, tas, arbres binaires équilibrés, représentation et manipulation de graphes, traitement de données textuelles, dictionnaires).",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2-3.4, AA2-3.5, AA2-3.7 AA4.2 AA5.3 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.M1, S1.3 S2.2, S2.3, S2.4 S4.3 S5.4 S6.1, S6.3 Les étudiants ayant suivi avec fruit ce cours seront capables de faire un choix argumenté sur l'utilisation des principales structures de données utilisées pour représenter des collections, utiliser à bon escient les algorithmes existants pour manipuler ces structures de données et analyser leur performance, concevoir et mettre en oeuvre des variantes des algorithmes étudiés, tester des algorithmes et des structures de données, utiliser à bon escient les algorithmes et structures de données documentées dans une l'API abstraire, modéliser et d'implémenter des solutions efficaces à des problèmes de type « puzzle » algorithmiques. Les étudiants auront développé des compétences méthodologiques et opérationnelles.  En particulier, ils auront développé leur capacité à : analyser de façon critique un problème posé, tester et debugger des programmes algorithmiques, implémenter efficacement des algorithmes courts mais non triviaux. apprendre par eux-mêmes dans un ouvrage de référence et dans la documentation technique complémentaire",
        "content": "Complexité calculatoire, Algorithmes de tris Arbres, arbres binaires de recherche, Arbres équilibrés, Tries Dictionnaires et tables de hachage, Files de priorité et tas, Graphes Manipulation de données textuelles (pattern matching et de compression)",
        "teaching_methods": "La méthode de pédagogie active suivie dans ce cours est inspirée des classes inversée. Il y a six modules de deux semaines. Chaque module comporte un cours d’introduction à la matière, des exercices théoriques à préparer, des chapitres du livre de référence à lire, un TP de correction des exercices en milieu de modèle, des travaux sur inginious à réaliser (programmes Java) et finalement un cours de restructuration en fin de module. Une des composantes essentielles de cette pédagogie consiste à faire apprendre chaque étudiant par lui-même. La réussite du processus d'apprentissage présuppose donc une implication significative de chaque étudiant.. L'apprentissage proprement dit reste de la responsabilité de chaque étudiant . Pour réussir l’examen il est impératif que l’étudiant programme régulièrement .",
        "assessment_methods": "Examen sur ordinateur à l’aide d’Inginious https://inginious.info.ucl.ac.be. Un quizz sur deux points peut être organisé lors de la semaine smart et ne compte dans la note de l’étudiant uniquement si il fait remonter celle-ci. Nous organiserons éventuellement un concours algorithmique en fin de quadrimestre, qui pourrait rapporter deux points à l’examen si cela permet d’améliorer la note. Les IA génératives ne peuvent être utilisées ni pour le quizz, ni pour l'examen. Le quizz et l'examen sont individuels, aucune discussion ni collaboration n'est autorisée le temps de l'épreuve. Le non-respect de ces directives peut entraîner une réduction des notes ou d'autres sanctions académiques. Les mêmes conséquences s'appliqueront à un étudiant qui partage volontairement son code ou le rend disponible à d'autres étudiants. Si le professeur le juge nécessaire, un entretien supplémentaire pourra également être organisé pour vérification.",
        "online_resources": "https://moodle.uclouvain.be/course/view.php?id=1049 (mainly for communications with students) https://pschaus.github.io/LINFO1121/ (main website, with the exercices to do each week)",
        "bibliography": "Livre obligatoire: Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne, Addison-Wesley Professional. ISBN-13: 978-0321573513 ISBN-10: 032157351X",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2401",
        "title": "Open Source strategy for software development",
        "credits": "5.00",
        "hours": "30.0 h + 15.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Dricot Lionel"
        ],
        "teaching_language": "Anglais",
        "prerequisites": "Corequis :LINGI2255",
        "topics_covered": "Présentation de l'option Open Source tout en la comparant de façon systématique à l'option «propriétaires», lors du choix d'une application; analyser l'intérêt de contribuer à un logiciel Open Source, le cas échéant. Analyse et mise en oeuvre d'une approche Open Source pour le développement d'une application; opportunité de distribution d'une application Open Source, par exemple pour un objectif de valorisation ou d'image. Approche de type Open Source pour développements interne Objectifs visés par une approche Open Source Avantages et difficultés de cette approche Mise en oeuvre pratique Développement de produits Open Source Objectifs visés par une approche Open Source Intégration et gestion d'une communauté Open Source Droits d'auteur et choix d'une licence Open Source Mode de valorisation et modèle économique Mise en oeuvre pratique",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.2 INFO6 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF6 Aux termes de la formation, les apprenants seront capables de : Comprendre et expliquer les avantages et inconvénients d'une approche Open Source pour le développement interne d'un logiciel Justifier le choix d'une approche Open Source pour le développement d'un logiciel au sein d'une organisation Se positionner et justifier un choix propriétaire par rapport à un choix Open Source ; Organiser un développement selon une approche Open Source Planifier la rencontre et le déroulement des objectifs d'une manière cohérente Comprendre et expliquer les avantages, inconvénients et les modèles économiques d'une distribution Open Source d'un logiciel Justifier le choix d'une distribution Open Source d'un logiciel développé Organiser un développement collaboratif Open Source Justifier le choix d'une approche contributive pour le développement d'un logiciel",
        "content": "Ce cours se propose de répondre à ces questions à travers un cours théorique illustré par des exemples réels et documentés ainsi qu'à travers une approche pratique encourageant les étudiants à contribuer à l'open source. L'approche théorique abordera les domaines suivants : Histoire de l'Open Source, du logiciel libre, GNU et les grands projets open source marquants. Aspects légaux de l'open source : les licences. Aspects politiques de l'utilisation de logiciels open source. Exemple de la ville de Munich et du projet Limux. Aspects de gouvernance communautaire : comment contribuer, gérer et faire vivre un projet open source ? Comment gérer une communauté et ses conflits ? Qui décide du code, des releases, de la documentation ? Exemples du projet GNOME et du noyau Linux. Outils de communication Open Source. Aspects économiques : les différents business model de l'open source. Les succès et les échecs. Exemples historiques de Red Hat, Ubuntu et Mandriva. Exploration des nouveaux modèles avec OpenCollective Aspects technico-politiques de l'open source 1 : la sécurité, le respect de la vie privée. Aspects technico-politiques de l'open source 2 : l'interopérabilité et les formats ouverts. L'open source à l'heure du web : les défis, la licence AGPL. Exemple des projets React et AngularJS Open Source et décentralisation. Exemples des projets XMPP, Diaspora, Mastodon et Bitcoin. Introduction à la blockchain. Étude de cas 1 : Recommander une solution open source au sein d'une entreprise. Notion du Total Cost of Ownership. Étude de cas 2 : Utiliser de l'open source en coopération avec du logiciel propriétaire : les différents scénarios. Exemple d'Android. Étude de cas 3 : open sourcer une application propriétaire existante. Exemple de Mozilla. Comme travail pratique, les étudiants devront réaliser tout au long du cours un rapport analysant un projet open source de leur choix. En sus de cette analyse, ils seront invités à apporter une contribution au projet, même simple ou non-technique, et à décrire le processus de cette contribution.",
        "teaching_methods": "Cours ex-cathedra, avec interventions externes et projet individuel à mettre en oeuvre durant l'année. La date limite de remise du projet est deux semaines avant l'examen ou fin du quadrimestre",
        "assessment_methods": "Examen oral durant lequel l'étudiant défendra son projet (50% des points) et répondra à des questions du professeur (50% des points) Les modalités restent les mêmes en septembre (le projet étant individuel et pouvant être accompli en juillet/août).",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1123",
        "title": "Calculabilité, logique et complexité",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Deville Yves"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les compétences en programmation, algorithmique et langage de programmation visées dans le cours LEPL1402 et en mathématiques discrètes telles que vues dans les cours LINFO1114 ou LEPL1108",
        "topics_covered": "Théorie de la calculabilité : problèmes et algorithmes, fonctions calculables et non calculables, réduction, classes de problèmes indécidables (théorème de Rice), théorème du point fixe, thèse de Church-Turing Logique : logique des propositions et logique des prédicats (syntaxe, sémantique, preuve, quantificateurs, model checking, résolution) Modèles de calculabilité : machine de Turing Théorie de la complexité : classes de complexité, NP-complétude, théorème de Cook, résolution de problèmes NP-complets.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I3, S1.G1 S2.2 Les étudiants ayant suivi avec fruit ce cours seront capables de reconnaître, expliquer et identifier les limites du traitement de l'information par un ordinateur; expliquer et exploiter à bon escient les principaux modèles de calculabilité en explicitant leurs fondements, leurs différences et leurs similitudes; convertir des affirmations du langage courant en expressions logiques en utilisant la syntaxe et la sémantique de la logique des propositions ou des prédicats reconnaître, identifier et appréhender les problèmes non calculables ainsi que les problèmes intrinsèquement complexes. Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils auront développé leur capacité à avoir un regard critique sur les performances et la capacité des systèmes informatiques",
        "content": "Introduction Ensembles énumérables Calculabilité: résultats fondamentaux Modèles de calculabilité Logique des propositions Introduction à la complexité algorithmique Classes de complexité",
        "teaching_methods": "Ce cours peut être donné selon différentes modalités présentielles et distancielles.  Ceux-ci pourront notamment contenir des cours magistraux, des lectures, des préparations, des séances d'exercices ainsi que du travail individuel ou en groupe.",
        "assessment_methods": "Différents modes d'évaluations pourront être organisés : évaluation continue, travaux notés, participation, examen.  L'examen sera écrit, mais en cas de doute de l'enseignant sur la note à attribuer à un étudiant, celui-ci pourra être interrogé complémentairement en oral.  En fonction du nombre d'étudiants, l'examen de septembre pourrait être oral.",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2255",
        "title": "Software engineering project",
        "credits": "6.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Legay Axel"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Pendant longtemps, les CPU à usage général se sont concentrés sur la prise en charge efficace d'un seul thread d'exécution. Des améliorations dans la fabrication des puces ont permis d'empaqueter plus de transistors sur la même surface d'une plaquette de silicium, et de faire fonctionner des processeurs résultants à des fréquences plus élevées. Les applications monothread s'exécuteraient simplement plus rapidement avec chaque nouvelle génération de processeur. Cette ère est maintenant terminée. L'industrie a connu plusieurs limitations connues sous le nom de mur de puissance, de mur de mémoire et de mur d'ILP. Les fabricants de puces ne sont plus en mesure d'augmenter verticalement les processeurs prenant en charge un seul thread d'exécution, ils ont commencé à regrouper plusieurs unités d'exécution plus simples, ou coeurs. L'exploitation de la puissance de plusieurs coeurs nécessite l'exploitation du parallélisme dans les applications utilisant plusieurs threads. L'écriture de code concurrent nécessite l'identification et la gestion de la concurrence, et l'introduction de la synchronisation nécessaire pour l'exactitude. L'écriture de code concurrent évolutif et performant nécessite de comprendre ce compromis entre la synchronisation et le parallélisme et de maîtriser des implémentations efficaces de structures de données partagées et d'algorithmes pour une exécution simultanée. Enfin, les processeurs multicoeurs emploient une disposition de mémoire complexe, et l'hypothèse de temps d'accès mémoire uniformes n'est plus valide. Comprendre l'impact des accès mémoire non uniformes (NUMA) est donc important pour écrire du code efficace pour les processeurs multicoeurs. Ce cours fournira aux étudiants les outils et les connaissances nécessaires pour écrire un code efficace et évolutif pour les processeurs multicoeurs modernes. Il détaillera les mécanismes disponibles pour la synchronisation, depuis l'implémentation de constructions de langage telles que verrous, moniteurs ou variables de condition, aux utilisations directes des primitives de synchronisation fournies par le CPU (par exemple compare-and-swap) pour construire des structures de données efficaces et évolutives . Il mettra l'accent sur les aspects de performance de la programmation multicoeur: l'impact des primitives de synchronisation, l'impact de l'accès à la mémoire non uniforme et l'impact des hiérarchies de mémoire à plusieurs niveaux. Il offrira enfin une ouverture vers l'avenir de la programmation multicoeur avec une introduction à la mémoire transactionnelle et au support de l'exécution spéculative dans les CPU modernes (par exemple Intel Haswell), et discutera du modèle d'exécution du code concurrent s'exécutant sur les GPU.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO2.1-5 INFO4.1-4 INFO5.1-6 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO2.1-4 INFO4.1-4 INFO5.1-3 INFO6.2-4 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M3 1SINF2.1-4 1SINF3.1-4 1SINF4.1-3 1SINF5.2-4 A l'issue de ce cours, les étudiants auront appris à développer un produit logiciel de grande taille dans des conditions semi-professionnelles.  Les étudiants ayant suivi ce cours avec fruit seront capables de : Décrire les différences entre plusieurs modèles de développement majeurs (par exemple, cascade, itératif et agile); Distinguer entre les phases de développement de logiciels (spécifications, architecture, conception, implémentation, validation, documentation); Réaliser, d'une manière rigoureuse et systématique, les artefacts produits dans ces différentes phases du cycle de vie du logiciel; Appliquer une méthodologie de développement logiciel actuellement pratiquée dans l'industrie; Travailler efficacement dans une équipe pour développer un système logiciel de taille moyenne à grande; Gérer la coordination et la communication entre les différents membres de l'équipe; Interagir avec un client pour identifier ses besoins, pour clarifier les spécifications imprécises, et de prendre en compte la demande des modifications tout au long du processus de développement; Décrire les exigences fonctionnelles d'un système logiciel en utilisant, par exemple, les cas d'utilisation ou utilisateurs des histoires; Estimer le temps et les ressources nécessaires pour compléter un tel projet de développement de logiciels, planifier les tâches à exécuter et les délivrables à produire, et assurer le respect de cette planification; Utilisez un outil de gestion de projet pour affecter le suivi les tâches de développement logiciel; Mettre en pratique différentes méthodes et techniques pour assurer la qualité du logiciel produit; Comprendre les problèmes inhérents au développement de grands systèmes logiciels impliquant différentes parties prenantes et qui se composent de plusieurs composants.",
        "content": "Ce projet de génie logiciel consiste en le développement (analyse, conception, implémentation, validation, documentation, intégration et déploiement) d'une application logicielle réaliste et non-triviale, si possible proposée par et avec la participation d'un client réel, dans des conditions de travail semi-professionnelles. Le sujet de l'application à construire est proposé par un partenaire industriel ou une organisation à but non lucratif qui participe à l'organisation de ce cours. Des équipes de 6 à 8 étudiants (nécessaires pour réaliser un grand projet), collaboreront, supervisées par un chef de projet. Des réunions hebdomadaires auront lieu avec le chef de projet (un assistant ou tuteur) pour présenter le progrès et les difficultés rencontrées, pour évaluer les alternatives, et discuter de la distribution et de la planification du travail au sein de l'équipe. L'application à développer sera très probablement une application web, mais le choix du langage de programmation, de l'environnement, le cadre d'application et des outils de développement dépendront des exigences du client du projet.",
        "teaching_methods": "Développement (analyse, conception, implémentation, validation, documentation, intégration et déploiement) d'un grand logiciel pour un client, en equipe de 6 à 8 étudiants supervisées par un chef de projet. Des réunions hebdomadaires auront lieu avec le chef de projet, et différents prototypes et rapports doivent être produits en cours du projet.",
        "assessment_methods": "L'évaluation du cours sera basée sur: La participation individuelle aux travail de groupe et aux réunions de groupe hebdomadaires avec les tuteurs de cours; La réalisation de deux à trois prototypes intermédiaires avec rapports techniques correspondants; Le rapport final, le système livré et sa documentation, ainsi que la présentation et la démonstration du produit final devant le client. L'intégration des solutions des groupes. Attention: Étant donné que ce cours est basé sur la participation à un projet d'équipe tout au long de l'année, les côtes de projets seront automatiquement conservées en seconde session.",
        "other_info": "Préalables: Avoir une bonne connaissance et expérience avec les concepts de la programmation orientée objet, les algorithmes et les structures de données. Avoir participé à l'élaboration d'un système logiciel de petite à moyenne échelle.",
        "online_resources": "http://moodleucl.uclouvain.be/course/view.php?id=7599",
        "bibliography": "French Des lectures supplémentaires seront suggérées dans le plan de cours qui décrit les produits livrables et l'organisation du projet. Les supports de cours pertinents, des slides et des informations pratiques seront accessibles sur Moodle, qui sera également le principal moyen de communication entre l'enseignant et les étudiants. English Additional reading material will be suggested in the course plan which describes the deliverables and organisation of the project. All relevant course material, slides and practical information will be available on Moodle, which will also be the main means of communication between the teacher and the students.",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1341",
        "title": "Réseaux informatiques",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les compétences de programmation, d'algorithmique et la maîtrise des structures de données élémentaires visées par le cours LSINC1402/LEPL1402. Avoir réussi le projet LSINC1503/LEPL1503 constitue un plus.",
        "topics_covered": "Rôle, modèle et besoins des applications réparties représentatives Modèle de référence des réseaux informatiques Transport d'informations de façon fiable: mécanismes et protocoles Interconnexion de réseau, adressage, routage et problèmes associés Réseaux locaux, métropolitains et longue distance",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA.1.1, AA.1.2 AA2.5-7 AA3.2 AA4.1-.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I7 S2.2-4 S4.3 S5.2-5 S6.2-3 Les étudiants ayant suivi avec fruit ce cours seront capables de Expliquer les besoins en communication des différentes classes d'applications réparties manipulant données ou flux multimedia Expliquer la répartition des fonctions qui satisfont ces besoins dans les différentes couches du modèle de référence Expliquer la réalisation de ces fonctions dans les protocoles de l'Internet Choisir des solutions en fonction des besoins de leur application quantifier les grandeurs caractéristiques intervenant dans les réseaux Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils ont développé leur capacité à Argumenter pour mettre en évidence les points positifs et négatifs d'une solution et émettre des suggestions pour l'améliorer ; Rédiger un rapport de synthèse reprenant les éléments que l'on souhaite mettre en avant.",
        "content": "Principes de base de fonctionnement des réseaux (transferts fiable, routage, nommage/adressage, partage de ressources, notions de base de sécurité, ...) Analyse de principaux protocoles utilisés sur Internet (HTTP, DNS, TLS, TCP, UDP, IP, OSPF, BGP, Ethernet, WiFi, ...)",
        "teaching_methods": "Le cours combine cours magistral, séances d'exercices encadrées, travail de groupe et travail personnel.",
        "assessment_methods": "L'évaluation se compose de quatre parties: un projet de groupe sur une implémentation du protocole d'une valeur de 5 points sur 20 une review individuelle de deux travaux de groupe, d'une valeur de 1 sur 20 points la participation aux exercices inginious chaque semaine, d'une valeur de 1 point sur 20 points l'examen final, d'une valeur de 13 sur 20 points Les étudiants qui contribuent activement aux supports pédagogiques peuvent obtenir des points de bonus. Les reviews associées au projet et la participation aux exercices inginious peuvent être uniquement présentés en première session. En seconde session, les étudiants qui le souhaitent peuvent remplacer les cinq points associés au projet de groupe par un travail individuel proposé début juillet.",
        "other_info": "Préalables : langage de programmation de haut niveau environnement Unix",
        "online_resources": "https://www.computer-networking.info https://moodle.uclouvain.be/course/view.php?id=1269",
        "bibliography": "Computer Networking: Principles, Protocols and Practice (3rd edition), https://beta.computer-networking.info",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1252",
        "title": "Systèmes informatiques",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Riviere Etienne"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les compétences de programmation en langage C visées par LEPL1503 et les notions algorithmiques visées par le LEPL1402. Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Niveaux d'abstraction dans les systèmes informatiques Architectures de processeurs Langage-machine, langage d'assemblage et langage C Rôles et fonctions des systèmes d'exploitation Utilisation des fonctions d'un système d'exploitation dans les applications Processus et threads : concepts, problèmes et solutions Systèmes multi-processeurs",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2.4-7 AA4.1, AA4.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I4 S2.2-4 S5.2, S5.5 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer quelles fonctions sont remplies par les différents niveaux de la hiérarchie allant de la machine physique au niveau sur lequel s'appuient les applications expliquer les principales architectures de systèmes d'exploitation et processeurs, ainsi que les principaux dispositifs et techniques utilisés pour les réaliser utiliser et mettre en oeuvre de manière efficace les différents services et fonctions offertes par les processeurs et les systèmes d'exploitation",
        "content": "Le cours présente l'organisation et l'utilisation d'un système informatique, ainsi que les principes et la mise en œuvre des systèmes d'exploitation.",
        "teaching_methods": "- cours magistraux; - exercices avec feedback automatisé utilisant la plateform Inginious; - travaux dirigés - exercices tutorés. Certaines activités peuvent prendre place en ligne si les conditions l'impose.",
        "assessment_methods": "Session de janvier : - Point incitatif à la soumission d'exercices dans les temps (5%) - Evaluation continue et mini-projets (35%) - Examen (60%) Session de septembre : - La note de participation compte et ne peut pas être refaite (5%) - Réalisation d'exercices et de mini-projet(s) de façon individuelle (35%) - Examen (60%) Les activités d'évaluation continue sont toutes des activités certificatives et les règles de déontologie en termes de plagiat, triche, etc. s'y appliquent scrictement. Les activités d'évaluation continue sont toutes strictement individuelles sauf mention explicite du professeur. Pour les activités autorisées en binôme, toute collaboration avec des personnes en dehors du binôme d'étudiant constitue un cas de triche. Toute mise à disposition de code ou autre production à un tiers est constitutif d'un case de plagiat. L'utilisation d'IA générative est autorisée pour corriger la grammaire, l'orthographe et le style de texte préalablement écrit par un·e étudiant·e mais interdite pour générer du texte à partir d'une instruction ou pour générer du code. Des solutions de détection de plagiat sont utilisés de manière systématique. L'évaluation continue donnera lieu à une note globale unique communiquée aux étudiants avant l'examen de janvier (ou aout), sur 8 points, incluant la note de participation. Tout non-respect des consignes en matière de déontologie entrainera une note de 0/8 pour l'évaluation continue et la dénonciation des étudiants concernés aux autorités. Le professeur titulaire peut demander un examen oral complémentaire à toute activité certificative du cours, incluant l'ensemble des activités d'évaluation continue et/ou l'examen. La convocation à un examen additionnel est obligatoire et fait partie intégrante du processus d'évaluation. Des activités formatives sont susceptibles d'être considérés comme certificatives et prendront alors une partie ou tout du poids de l'examen dans la note si les circonstances le demandent. L'examen peut utiliser tout ou partie des modalités d'évaluation suivantes en proportion variable. Cette proportion est annoncée lors de l'examen : restitution de connaissances sous forme de question de cours ouvertes. application de connaissances sous forme de problème. QCM et QRM appliquant le principe de \"standard setting\" : une réponse incorrecte à une question ne conduit pas à une pénalité, et la partie ne peut pas être quotée négativement, mais un seuil minimal (annoncé) de réponses correctes est nécessaire avant d'accumuler effectivement des points pour cette partie de l'examen.",
        "online_resources": "Le lien vers le syllabus est disponible sur l'espace Moodle du cours.",
        "course_materials": "LINFO1252 open source Syllabus",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1341",
        "title": "Réseaux informatiques",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Bonaventure Olivier"
        ],
        "teaching_language": "Français",
        "prerequisites": "Avoir réussi le projet LEPL1503 constitue un plus",
        "topics_covered": "Rôle, modèle et besoins des applications réparties représentatives Modèle de référence des réseaux informatiques Transport d'informations de façon fiable: mécanismes et protocoles Interconnexion de réseau, adressage, routage et problèmes associés Réseaux locaux, métropolitains et longue distance",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA.1.1, AA.1.2 AA2.5-7 AA3.2 AA4.1-.4 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I7 S2.2-4 S4.3 S5.2-5 S6.2-3 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer les besoins en communication des différentes classes d'applications réparties manipulant données ou flux multimedia expliquer la répartition des fonctions qui satisfont ces besoins dans les différentes couches du modèle de référence expliquer la réalisation de ces fonctions dans les protocoles de l'Internet choisir des solutions en fonction des besoins de leur application quantifier les grandeurs caractéristiques intervenant dans les réseaux Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils ont développé leur capacité à argumenter pour mettre en évidence les points positifs et négatifs d'une solution et émettre des suggestions pour l'améliorer ; rédiger un rapport de synthèse reprenant les éléments que l'on souhaite mettre en avant.",
        "content": "Principes de base de fonctionnement des réseaux (transferts fiable, routage, nommage/adressage, partage de ressources, notions de base de sécurité, ...) Analyse de principaux protocoles utilisés sur Internet (HTTP, DNS, TLS, TCP, UDP, IP, OSPF, BGP, Ethernet, WiFi, ...)",
        "teaching_methods": "Le cours combine cours magistral, séances d'exercices encadrées, travail de groupe et travail personnel",
        "assessment_methods": "L'évaluation se compose de trois parties: un projet d'analyse de traces de paquets d'une valeur de 4 points sur 20 un projet de configuration de réseau pour un total de 3 points sur 20 l'examen écrit, d'une valeur de 13 sur 20 points Les étudiants qui contribuent activement aux supports pédagogiques peuvent obtenir un ou des points de bonus. Le projet de configuration peut être uniquement présenté en première session. Une analyse de trace individuelle peut être refaite en seconde session, dans ce cas elle compte pour 4 points sur 20. L’utilisation des logiciels d’IA génératives tels que chatGPT, GitHub copilot, ... est interdite pour l’assistance à la rédaction des rapports et du code source demandés dans le cadre de ce cours. Par ailleurs, les sources d’information externes doivent être systématiquement citées en respectant les normes de référencement bibliographique.",
        "other_info": "Préalables : langage de programmation de haut niveau environnement Unix",
        "online_resources": "https://www.computer-networking.info https://moodle.uclouvain.be/course/view.php?id=1269",
        "bibliography": "Computer Networking: Principles, Protocols and Practice (3rd edition), https://beta.computer-networking.info",
        "course_materials": "Computer Networking: Principles, Protocols and Practice (3rd edition)",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1361",
        "title": "Intelligence artificielle",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Deville Yves",
            "Piette Eric"
        ],
        "teaching_language": "Français",
        "prerequisites": "LEPL1402: Programmation dans un langage de haut niveau",
        "topics_covered": "Résolution de problèmes par la recherche: formulation des problèmes, stratégies de recherche informées et non informées, recherche locale, évaluation du comportement et coût estimé,  applications Satisfaction de contraintes: problèmes de formulation, traçage et propagation de contraintes, applications Jeux et recherche contradictoire : algorithme de minimax et élagage Alpha-Beta, applications Logique propositionnelle: représentation des connaissances, inférence et  raisonnement, applications Logique du premier ordre: représentation des connaissances, inférence et raisonnement, chaînage avant et arrière, systèmes à base de règles, applications Planification: langages des problèmes de planification, méthodes de recherche, graphes de planification, planification hiérarchique, extensions, applications AI, philosophie et éthique: \"les machines savent-elles agir intelligemment ?\", \"les machines savent-elles vraiment penser ?\", l'éthique et les risques de l'intelligence artificielle, l'avenir de l'intelligence artificielle",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.2-4 INFO5.2, INFO5.5 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.M4 SINF2.2-4 SINF5.2, SINF5.5 SINF6.1, SINF6.4 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M4 1SINF2.2-4 1SINF5.2, 1SINF5.5 1SINF6.1, 1SINF6.4 Les étudiants ayant suivi avec fruit ce cours seront capables de expliquer et exploiter à bon escient les concepts de base de la représentation de connaissances, de la résolution de problèmes et des méthodes de raisonnement, tels qu'utilisés en intelligence artificielle évaluer l'applicabilité, les forces et les faiblesses de la représentation des connaissances, de la résolution de problèmes et des méthodes de raisonnement dans le cadre de la résolution de problèmes concrets d'ingénierie développer des systèmes intelligents par l'assemblage de solutions à des problèmes concrets discuter du rôle de la représentation des connaissances, de la résolution de problèmes et de méthodes de raisonnement dans la conception et la réalisation de systèmes intelligents Les étudiants auront développé des compétences méthodologiques et opérationnelles.  En particulier, ils auront développé leur capacité à : maîtriser un nouveau langage de programmation utilisant principalement un tutoriel en ligne faire face à des délais et à la compétitivité lorsque l'on développe un application qui se veut la plus efficace.",
        "content": "Introduction et agents intelligents Recherche non informée et informée Recherche locale et heuristiques Problèmes de satisfaction de contraintes (CSP) Recherche avec adversaire (Jeux) et techniques de Monte Carlo Tree Search (MCTS) Agents logiques (logique du premier ordre et inférence) Prise de décision simple Prise de décision complexe Prise de décision multi-agent Apprentissage supervisé à partir d'exemples Apprentissage par renforcement",
        "teaching_methods": "Apprentissage basé sur la résolution de problèmes Apprentissage par la pratique 3 projets de longue durée à réaliser en binômes (sur plusieurs semaines) Cours magistraux (1 à 2 heures) Exercices théoriques et pratiques adaptés aux thématiques abordées Retour d'expérience sur les projets réalisés et correction des exercices",
        "assessment_methods": "L'évaluation se fera à travers une évaluation continue des missions et travaux effectués durant l'année, ainsi qu'un examen final. L’évaluation continue comprend des travaux notés qui donneront lieu à une note globale unique, communiquée à la fin du dernier travail. Le non-respect des consignes méthodologiques définies sur Moodle, notamment concernant l’utilisation de ressources en ligne ou la collaboration entre étudiant·es, entraînera l'attribution d'une note globale de 0 pour l’évaluation continue. L’utilisation de ChatGPT, ou tout autre outil similaire, est strictement interdite pour la réalisation des missions et travaux. Le professeur se réserve le droit de convoquer les étudiants à une session orale de questions-réponses afin de vérifier la compréhension du travail rendu. En cas d’échec à cette session, une note globale de 0 sera attribuée au travail. La pondération des travaux de l'année et de l'examen est la suivante : si tous les travaux sont évalués à 15/20 ou plus, leur pondération est de 40% et celle de l'examen de 60%. Si la note moyenne des travaux est inférieure à 15/20, leur pondération est réduite à 30% et celle de l'examen est augmentée à 70%. Les travaux doivent être réalisés durant le quadrimestre du cours. Il n'est pas possible de refaire les travaux durant un autre semestre ou pour la session d'août/septembre. L'examen sera écrit, mais en cas de doute de l'enseignant sur la note à attribuer, un complément oral pourra être organisé pour l’étudiant concerné.",
        "online_resources": "https://moodle.uclouvain.be/course/view.php?id=1338",
        "bibliography": "Stuart Russell, Peter Norvig, Artificial Intelligence : a Modern Approach, 3nd Edition, 2010, 1132 pages, Prentice Hall transparents en ligne",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lsinc1121",
        "title": "Algorithmique et structure de données",
        "credits": "5.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises la maîtrîse de la programmation et de la conception de programmes dans un langage orienté-objet tel que Java, la connaissance de structures de données élémentaires et des notions de récursion et de complexité calculatoire telles que visées par le cours LSINC1402/LEPL1402. Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Mesures de complexité d'un algorithme et méthodes d'analyse de complexité. Algorithmes de tris et recherche dichotomiques. Structures de données de base (listes, arbres, arbres binaires de recherche) : étude de leurs propriétés abstraites, de leurs représentations concrètes, de leur application et des principaux algorithmes qui les manipulent. Structures de données avancées (union-find, tables de hachage, tas, arbres binaires équilibrés, représentation et manipulation de graphes, traitement de données textuelles, dictionnaires).",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : Eu égard au référentiel AA du programme « Bachelier ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : AA1.1, AA1.2 AA2-3.4, AA2-3.5, AA2-3.7 AA4.2 AA5.3 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.M1, S1.3 S2.2, S2.3, S2.4 S4.3 S5.4 S6.1, S6.3 Les étudiants ayant suivi avec fruit ce cours seront capables de faire un choix argumenté sur l'utilisation des principales structures de données utilisées pour représenter des collections, utiliser à bon escient les algorithmes existants pour manipuler ces structures de données et analyser leur performance, concevoir et mettre en oeuvre des variantes des algorithmes étudiés, tester des algorithmes et des structures de données, utiliser à bon escient les algorithmes et structures de données documentées dans une l'API abstraire, modéliser et d'implémenter des solutions efficaces à des problèmes de type « puzzle » algorithmiques. Les étudiants auront développé des compétences méthodologiques et opérationnelles. En particulier, ils auront développé leur capacité à : analyser de façon critique un problème posé, tester et debugger des programmes algorithmiques, implémenter efficacement des algorithmes courts mais non triviaux. apprendre par eux-mêmes dans un ouvrage de référence et dans la documentation technique complémentaire",
        "content": "Complexité calculatoire, Arbres, arbres binaires de recherche, Arbres équilibrés, Dictionnaires et tables de hachage, Files de priorité et tas, Graphes Manipulation de données textuelles (pattern matching et de compression)",
        "teaching_methods": "La méthode de pédagogie active suivie dans ce cours est inspirée des classes inversée. Il y a six modules de deux semaines. Chaque module comporte un cours d’introduction à la matière, des exercices théoriques à préparer, des chapitres du livre de référence à lire, un TP de correction des exercices en milieu de modèle, des travaux sur inginious à réaliser (programmes Java) et finalement un cours de restructuration en fin de module. Une des composantes essentielles de cette pédagogie consiste à faire apprendre chaque étudiant par lui-même. La réussite du processus d'apprentissage présuppose donc une implication significative de chaque étudiant.. L'apprentissage proprement dit reste de la responsabilité de chaque étudiant . Pour réussir l’examen il est impératif que l’étudiant programme régulièrement .",
        "assessment_methods": "Pour l'examen, les étudiants devront programmer des tâches sur inginious https://inginious.info.ucl.ac.be suivi d'une discussion facultative avec l'enseignant en tant qu'examen oral régulier au cas où l'étudiant ne pense pas que le score ingininious reflète son expertise dans le cours. Un quiz à mi-parcours peut être proposé sur deux points pendant la semaine intelligente, mais cela ne peut avoir qu'un impact positif sur votre note finale. Une note de participation sera également prise en compte pour deux points pour la première session, mais pas pour la deuxième session.",
        "other_info": "Préalables: maîtrîser la programmation dans un langage orienté-objet tel que Java connaître et utiliser correctement de structures de données élémentaires (piles, files, listes, etc.) avoir des notions en matière de récursion et de complexité calculatoire. Ces prélables sont matières des cours LEPL1401 et LEPL1402.",
        "online_resources": "https://moodleucl.uclouvain.be/course/view.php?id=7682 + Questions sur le site du cours, accessible via Moodle.",
        "bibliography": "Livre obligatoire: Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne, Addison-Wesley Professional. ISBN-13: 978-0321573513 ISBN-10: 032157351X Et plus généralement les documents (énoncés des missions, conseils pour l'examen, ...) disponibles sur : http://moodleucl.uclouvain.be/course/view.php?id=7682",
        "responsible_entity": "SINC"
    },
    {
        "url": "https://uclouvain.be/cours-2024-lepl1509",
        "title": "Projet 4 (en informatique)",
        "credits": "5.00",
        "hours": "30.0 h + 22.5 h",
        "quadrimester": "Q2",
        "teachers": [
            "Verhaeghe Hélène"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce projet suppose acquises les notions d'algorithmique, de programmation visées par les cours LEPL1401 et LINFO1101 et LEPL1402 . Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Ce projet est l'aboutissement de la formation de baccalauréat en informatique . Dans ce projet, les étudiants mettent en 'uvre différentes compétences acquises lors de leur formation en informatique. Ils s'initient à la gestion de base de données. Par exemple, en fonction du sujet précis du projet (qui varie d'une année à l'autre) : mobile computing, programmation dans un language orienté-objets, interface graphique, programmation par événements, client-serveur",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Contribution du cours au référentiel du programme Eu égard au référentiel AA du programme « Bachelier en Sciences de l'Ingénieur, orientation ingénieur civil », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : '    AA 1.1, 1.2 '    AA 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7 '    AA 3.1, 3.2 '    AA 4.1, 4.2, 4.3, 4.4, 4.5 '    AA 5.1 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : '    S1.I5 '    S2.1-4 '    S4.1-3 '    S5.1-6 '    S6.1, S6.3 Acquis d'apprentissage spécifiques au cours Les compétences visées par les « projets 4 » consistent d'une part en des compétences transversales, communes à tous les projets 4, et d'autre part en des compétences techniques disciplinaires, spécifiques à chaque spécialisation. Compétences transversales : Les projets 4 visent à acquérir des compétences transversales proches de la pratique du métier d'ingénieur dans un contexte disciplinaire varié : '    analyser un système existant et le perfectionner ; '    analyser avec sens critique des données expérimentales ; '    faire la part des choses entre la réalité et les modèles utilisés pour la décrire ou la modifier ; '    appréhender la notion d'incertitude dans la gestion du projet, dans sa réalisation, et dans les résultats obtenus. Le projet fera également la part belle au droit à l'erreur, composante caractéristique de début de carrière d'un jeune ingénieur. Ce projet vise également à acquérir des compétences techniques en informatique. Au terme de ce projet en informatique, les étudiants seront capables de : '    appliquer simultanément et de façon cohérente des connaissances et compétences acquises dans différents domaines de l'informatique :  mobile computing, programmation java, réseaux et communication, interface graphique, programmation par événements, client-serveur.  Certaines de ces compétences seront acquises dans le cadre de ce projet. '    identifier et réaliser les différentes étapes de conception d'un logiciel. '    gérer le planning d'un projet informatique '    comprendre l'architecture d'un logiciel pour être en mesure de faire des choix éclairés en vue de le modifier ou de le perfectionner; '    faire preuve d'esprit critique par rapport au projet ainsi qu'à ses délivrables et en particulier sur la pertinence du logiciel, l'analyse et la conception du système, mais également par rapport à la gestion du planning au sein du groupe. '    mettre en valeur le logiciel réalisé par une démonstration ainsi que sa distribution Open Source. La contribution de cette UE au développement et à la maîtrise des compétences et acquis du (des) programme(s) est accessible à la fin de cette fiche, dans la partie « Programmes/formations proposant cette unité d'enseignement (UE) » .",
        "content": "Le logiciel à définir et à concevoir sera lié au mobile computing (technologie Android). Le projet sera ouvert. Chaque groupe définira son propre projet et proposera un planning ainsi que des étapes intermédiaires. Une approche Agile (développement itératif et incrémental) sera utilisée. Le développement de l'application se fera à l'aide d'IA générative et autre outils de développement basé sur l'IA. Un usage critique sera fait de ces outils avec réflection de la part des étudiants sur l'utilité de ces outils.",
        "teaching_methods": "Le projet sera réalisé par groupe d'étudiants (4-5 étudiants par groupe) Les étudiants seront encouragés à rédiger ou à défendre leur projet en anglais afin d'améliorer leurs compétences de communication en anglais sur une thématique technique, oralement et/ou par écrit.",
        "assessment_methods": "La note sera composée du résultat du projet, en ce compris la réalisation, les présentations écrites, les présentations et/ou interactions orales, l’organisation du travail et/ou la posture réflexive à ce sujet, et la maitrise des concepts liés au projet. Cette peut être individualisée en fonction de l'implication de l'étudiant·e au sein du groupe pendant le quadrimestre (présence obligatoire aux activités, participation active aux travaux intermédiaires et aux travaux évalués). Les travaux donnant lieu à cette partie de la note ne peuvent être refaits en seconde session. d’une évaluation individuelle écrite hors session Le poids de l’évaluation individuelle dans la note finale est de 25% en cas de réussite de celle-ci, mais augmente en cas d’échec. Plus spécifiquement, il sera de 100% pour une note inférieure ou égale à 6, et évoluera linéairement avec la note entre 6 et 10 selon la formule suivante: poids = 1 -  0.75 * (note - 6)/4. La deuxième session consistera en un examen individuel, demandant éventuellement la préparation de travaux individuels au préalable.",
        "other_info": "Ce cours fait partie de l'ensemble des cours « Projet 4 » du programme de baccalauréat ingénieur civil. Les projets 4 partagent des objectifs transversaux communs mais sont déclinés en diverses versions aux objectifs disciplinaires distincts, correspondant aux filières du programme. Chaque étudiant choisit le projet proposé par une de ses filières. L’utilisation des logiciels d’IA génératives est autorisée: dans les rapports/présentations: pour la correction orthographique/gramaticale uniquement pour le développement de l'application: obligatoire. Il sera demandé de documenter et critiquer l'usage qui en est fait.",
        "online_resources": "Moodle \"LEPL1509 - Project 4 (in Computer Science)\"",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2991",
        "title": "Graduation project/End of studies project",
        "credits": "15.00",
        "hours": "",
        "quadrimester": "Q1 et Q2",
        "teaching_language": "Anglais",
        "topics_covered": "Travail visant à résoudre une problématique liée à des thématiques des sciences informatiques. Le TFE a une finalité technologique et industrielle (visant à initier au métier d'informaticien en industrie). Les compétences transversales intégrées au TFE sont en lien avec les AA visés : la rédaction, la communication, la planification et l'argumentation, l'ouverture aux aspects éthiques, économiques et sociétaux.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 AA1 de démontrer la maîtrise d'un corpus de connaissances et compétences en sciences informatiques, lié au sujet de son TFE ; AA2 de mener à son terme une démarche d'informaticien d'envergure, en amplitude et en temps consacré, appliquée au développement du produit, service ou installation visés dans le TFE ( cet AA s'applique pour un TFE ayant une composante « développement/technologique » significative ) ; AA3 d'organiser et de planifier le déroulement du TFE sur bases des ressources allouées et des contraintes temporelles, de sécurité (si applicable) et de compétences disponibles ; AA4 de communiquer efficacement oralement et par écrit (en français et/ou en anglais) en vue de mener le TFE ; AA5 de prendre en compte l'impact sociétal (valorisation économique possible et/ou impact éthique et/ou impact environnemental et/ou social). Les AA spécifiques sont définis dans un document annexe « harmonisation des TFE ».",
        "content": "Le TFE peut être focalisé sur des aspects soit théoriques, soit expérimentaux, soit de simulation, soit de développement, ou sur une combinaison de ces composantes. Enfin, le TFE peut être l'occasion d'une confrontation forte avec le monde industriel.",
        "teaching_methods": "Les étudiants sont responsables de planifier et préparer les rencontres avec le promoteur (AA). L'étudiant rédige un plan (« roadmap ») du TFE rendu au(x) promoteur(s) 1 à 2 mois après le début du TFE, avec copie aux responsables de programme pour les commissions qui le souhaitent. Une version revue de ce document peut être demandée à mi-parcours (si pertinent). Ce plan contiendra les éléments suivants (si pertinents) : -une énonciation claire de l'objectif du TFE ; -la déclinaison des AA visés (idéalement aussi les AA spécifiques) ; -le positionnement contextuel (type de domaine d'application, impact sociétal, ') ; -les méthodes envisagées (théorie, outils expérimentaux, développement, simulation numérique) ; -la liste des ressources disponibles techniques (équipements, codes, etc) qu'humaines (encadrant et personnes de référence pour aspects techniques) ; - un premier travail bibliographique bref, ce compris des notices techniques ; - un premier planning du travail avec des délivrables.",
        "assessment_methods": "Trois grilles sont proposées correspondant aux trois volets du TFE : travail de l'année, manuscrit et défense orale. Ces grilles sont construites sur bases d'une liste de critères reliés aux AA visés. Ces critères peuvent être éventuellement complétés par chaque commission de programme pour des acquis spécifiques, propres au diplôme. Pour chaque critère une lettre est proposée entre A et F avec une signification liée aux grades (A : Plus grande distinction, B : Grande distinction, C : Distinction, D : Satisfaisant, E : Suffisant, F : Échec). Il existe la possibilité d'indiquer que le critère ne s'applique pas (NA). Une note finale sur 20 est donnée pour chaque évaluation. En l’absence de consignes spécifiques données par le promoteur ou la promotrice du travail de fin d’études en ce qui concerne l’usage des intelligences artificielles génératives, consignes reprises dans un document écrit signé par l’étudiant·e et l’enseignant·e, le recours à des intelligences artificielles génératives pour l'aide à la rédaction du mémoire ou de certaines de ses parties, ou pour la production de parties de codes, n’est pas interdit, pour autant que l’étudiant·e indique explicitement l’usage qui a été fait de ces outils, dans la partie décrivant la méthodologie utilisée pour le travail. En outre, lorsqu’une partie du texte est recopiée d’une proposition issue d’une IA générative, il convient de référencer cette IA générative comme source du texte, tout comme on le ferait pour n’importe quelle citation extraite d’un document.",
        "online_resources": "Le règlement et les consignes, les dates importantes, les modèles et d'autres informations sur les travaux de fin d'études sont disponibles sur le site Moodle dédié https://moodleucl.uclouvain.be/course/view.php?id=11582",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2172",
        "title": "Databases",
        "credits": "6.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q2",
        "teachers": [
            "Nijssen Siegfried"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Les systèmes de gestion de bases de données (objectifs, exigences, l'architecture). Le modèle de données relationnel (théorie formelle, logique du premier ordre, contraintes). Les modèles conceptuels (entité-relation, modélisation rôle objet). Conception de base de données logique (formes normales et normalisation, ER-relationnel) Conception de bases de données physiques et stockage (tables et clés, index, structures de fichiers). Interrogation de bases de données (algèbre relationnelle, calcul relationnel, structures de données optimisation de requêtes, SQL) Propriétés ACID (atomicité, cohérence, isolation, durabilité), contrôle d'accès concurrentiel, techniques de récupération. programmation d'applications de bases de données (JDBC, curseurs de bases de données, Object-Relational Mapping). Tendances récentes ou plus avancées dans le domaine des bases de données (bases de données orientées objet, Big Data, NoSQL, NewSQL)",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.1-4 INFO4.1-4 INFO5.1-5 INFO6.1, INFO6.4 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.M2 SINF2.1-4 SINF4.1-4 SINF5.1-5 SINF6.1, SINF6.4 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M2 1SINF2.1-4 1SINF4.1-4 1SINF5.1-5 1SINF6.1, 1SINF6.4 Les étudiants qui terminent avec succès ce cours seront capables de : expliquer les scénarios dans lesquels utiliser une base de données est plus pratique que la programmation avec des fichiers de données ; expliquer les caractéristiques de l'approche utilisant des bases de données , d'où viennent-elles et les comparer avec les tendances actuelles dans le domaine des bases de données identifier et décrire les principales fonctions d'un système de gestion de bases de données ; classer les modèles de données conceptuels, logiques et physiques sur la base des concepts qu'ils fournissent pour décrire la structure de bases de données ; comprendre les grands principes et la théorie mathématique de l' approche relationnelle de gestion de bases de données ; concevoir des bases de données en utilisant une approche systématique , à partir d'un modèle conceptuel par un niveau logique ( c'est à dire un schéma relationnel ) jusqu'à un modèle physique ( c.-à- tables et les index ) ; u tiliser SQL ( DDL ) pour mettre en oeuvre un schéma des bases de données relationnelles et d istinguer des installations SQL par rapport à la distinction logique vs  physique. interroger les bases de données relationnelles en utilisant SQL ( DML )  et comparer SQL avec la théorie relationnelle. optimiser le fonctionnement d'une base de données. comprendre les avantages et désavantages des bases de donées NoSQL. utiliser des bases de données relationnelles , soit directement ou à partir d'un langage de programmation classique .",
        "content": "Introduction au modèle entité-association Bases du modèle relationnel: structures de données et algèbre. Langages relationnels de définition et de manipulation basés sur la logique. Etude critique du langage SQL. Query optimization. Programmation d'applications de bases de données. Fonctions et architecture des logiciels de gestion de bases de données. Gestion des accès simultanés aux bases de données et techniques associées de récupération en cas de panne NoSQL: graph databases, key-value stores, document stores Vue d'ensemble d'autres bases de données: spatio-temporal databases, data warehouses, OLAP",
        "teaching_methods": "The objectives are organized along three main axes: Understand: both the historical context, and recent challenges and developments in the database field; relational theory, why is has been invented and how it fits in practice; implementation techniques and major algorithms for data organization, query and transaction processing. Design: from conceptual modeling (e.g. Entity-Relationship, UML) down to physical database tuning (e.g. indexes, query plans), through logical database design (e.g. functional dependencies, normal forms, normalization algorithms) and reasoning (relational algebra, views and constraints). Use: installing and configuring database management systems, creating and tuning databases, using query languages in practice (e.g. SQL), connecting to databases (e.g. call interfaces, ORMs), integrating database systems in software designs. Theory and practice are acquired by students along those three axes as follows: Theory is dispensed in the traditional way, through lectures in the second quarter. The theoretical course follows Elmasri & Navathe's textbook [EN10]. Practice is obtained by participating in 4 projects. These projects are either done individually, in groups of 2 or in larger groups. Both theory and pratical missions are dispensed in English. Even though preference will be given to face-to-face teaching sessions, depending on the health situation and the number of students enrolled, other forms of teaching (online, co-modal or hybrid) may be considered.",
        "assessment_methods": "The final grade is determined by 4 projects and an exam that is organized at the end of the semester. The grade is calculated following a 75% / 25% rule (final written exam / participation and grade obtained for projects during the semester). Every project counts equally. Failure to comply with the methodological instructions communicated by the teacher, particularly with regard to the use of online resources or collaboration between students, will result in an overall mark of 0. The use of generative AI tools without prior permission is strictly prohibited.",
        "other_info": "Ce cours n' pas de préalables strictes. Néanmoins, une connaissance préalable de SQL diagrammes d'objets structures de données est fortement recommandée; le cours demandera beaucoup plus d'efforts à suivre si vous ne disposez pas de ces connaissances. Exemples de cours qui offrent ces sujets sont: LSINF1225 or LINFO1225 : connaissances de base en gestion de bases de données, LSINF1121 or LINFO1121 : bonne compétences en programmation.",
        "online_resources": "https://moodle.uclouvain.be/course/view.php?id=733",
        "bibliography": "Ramez Elmasri and Shamkant Navathe Fundamentals of Database Systems. Addison-Wesley Publishing Company, USA, 7th edition, 2010. Chris J. Date. An Introduction to Database Systems. Pearson Addison-Wesley, Boston, MA, 8 edition, 2004. Hugh Darwen, An Introduction To Relational Database Theory, 3th Edition, Bookboon, 2009 Jean-Luc Hainaut, Bases de Données, Concepts, Utilisation et Développement, 2e Edition, Dunod, 2012 T.M. Connolly and C.E. Begg. Database Systems: A Practical Approach to Design, Implementation, and Management. Number v. 1 in International computer science series. Addison-Wesley, 2005.",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo1114",
        "title": "Mathématiques discrètes",
        "credits": "5.00",
        "hours": "30.0 h + 15.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Saerens Marco"
        ],
        "teaching_language": "Français",
        "prerequisites": "Ce cours suppose acquises les notions d'algèbre  visées par le cours LINFO1112 Le(s) prérequis de cette Unité d’enseignement (UE) sont précisés \n                à la fin de cette fiche, en regard des programmes/formations qui \n                proposent cette UE.",
        "topics_covered": "Théorie des ensembles Rappels des notations et opérations ensemblistes Relations binaires entre ensembles : applications et lien avec les fonctions en analyse Cardinalité d'un ensemble (fini et infini) et notion d'inclusion-exclusion Equivalence, classes d'équivalence Logique Introduction à la logique des propositions Introduction à la logique des prédicats Méthodes de preuve Induction mathématique Notions d'algèbre de Boole Introduction à la théorie des nombres Nombres entiers naturels, principe de récurrence, nombres premiers, etc Division euclidienne, représentation dans une base, arithmétique modulo, représentation des entiers dans l'ordinateur Pcgd, algorithme d'Euclide Notions élémentaires de cryptographie Combinatoire Comptage Permutations Arrangements Relations de récurrence Solutions d'équations de récurrence Introduction à la théorie des graphes Graphes orientés et non orientés et leurs représentations matricielles Graphes bipartites et problèmes de matching Chemins sur un graphe et circuits Eulériens/Hamiltoniens Graphes planaires et coloriage Problèmes de plus court chemin Classement des noeuds d'un graphe : PageRank",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Bachelier en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : S1.I1, S1.G1 S2.2 Les étudiants ayant suivi avec fruit ce cours seront capables de : Utiliser à bon escient la terminologie des fonctions, relations et ensemble et réaliser les opérations associées lorsque le contexte le nécessite Expliciter la structure de base des principales techniques de preuve (preuve directe, contrexemple, preuve par l'absurde, induction, récurrence) Appliquer les différentes techniques de preuve de manière convaincante en sélectionnant la plus adaptée au problème posé Analyser un problème pour déterminer les relations de récurrence sous-jacentes Calculer des comptages, permutations, arrangements sur des ensembles dans le cadre d'une application. Modéliser divers problèmes du monde réel rencontrés en informatiques en utilisant les formes appropriées de graphes Expliquer le problème du plus court chemin dans un graphe et appliquer des algorithmes classiques pour résoudre ce problème",
        "teaching_methods": "Environ 30 heures de cours magistraux en présentiel ou distanciel selon les conditions. Un projet/cas d'étude obligatoire portant sur l'implémentation et l'application d'un ouplusieurs algorithmes.",
        "assessment_methods": "Un projet/cas d'étude obligatoire comptant pour 2 à 4 points sur 20 (spécifié en début d'année académique). Si le projet n'est pas remis, l'étudiante ou l'étudiant obtiendra 0/3 pour ce projet. Un examen écrit organisé en session comptant pour 18 à 16 points sur 20 (spécifié en début d'année académique). En présentiel ou distanciel, selon la situation. Concernant le projet/cas d'étude obligatoire et l'utilisation d'IA de type Chat GPT, assurez-vous que \"En soumettant un travail pour évaluation, vous affirmez : (i) qu'il reflète fidèlement le phénomène étudié, et pour cela vous devez avoir vérifié les faits, surtout s'ils sont prétendus par une IA générative (dont vous devez mentionner explicitement l’utilisation en tant qu’outil de soutien à la réalisation de votre travail) ; (ii) avoir respecté toutes les exigences spécifiques du travail qui vous est confié, notamment les exigences pour la transparence et la documentation de la démarche scientifique mise en œuvre. Si l'une de ces affirmations n'est pas vraie, que ce soit intentionnellement ou par négligence, vous êtes en défaut de votre engagement déontologique vis-à-vis de la connaissance produite dans le cadre de votre travail, et éventuellement d’autres aspects de l’intégrité académique, ce qui constitue une faute académique et sera considéré comme tel\".",
        "online_resources": "Voir Moodle",
        "bibliography": "Rosen K., Discrete mathematics and its applications, 8th edition, 2019. Mc Graw Hill.",
        "course_materials": "Slide du cours Textbook \"Mathématiques discrètes\" de K. Rosen",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2402",
        "title": "Open Source Project",
        "credits": "5.00",
        "hours": "",
        "quadrimester": "Q1 et Q2",
        "teaching_language": "Anglais",
        "topics_covered": "Tout étudiant INFO2MS, SINF2MS et SINF2M1 a la possibilité d'effectuer un stage « Open Source » correspondant à 140h de travail dans le cadre d'un projet Open Source de son choix. L'étudiant intéressé doit proposer à la commission de programme le projet auquel il souhaite contribuer.  La commission statue alors sur pertinence pour la formation de l'étudiant du choix d'un tel projet. Il ne s'agit pas de la création d'un nouveau projet Open Source mais de la participation active à un projet préexistant.",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO 2.4-5 INFO 4.2-3 INFO 5.1, 5.3, 5.5 INFO 6 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF 2.4-5 SINF 4.2-3 SINF 5.1, 5.3, 5.5 SINF 6 A l'issue de son stage, l'étudiant sera capable de : s'intégrer dans une communauté Open Source, en respecter les règles les régissant et interagir avec les différents intervenants ; maitriser les outils permettant de contribuer efficacement à un projet Open Source ; distinguer les enjeux du choix de l'Open Source dans un projet existant ; A l'issue du stage, l'étudiant rédigera un article où il sera capable de : Décrire de manière synthétique et précise les objectifs, la portée et les enjeux du projet OpenSource auquel il a contribué ; Expliciter sa contribution au projet et le positionnement de celle-ci par rapport à l'ensemble du projet ; Décrire les ressources techniques, méthodologiques mis en oeuvre dans le cadre du travail effectué, et expliciter leur adéquation avec le caractère Open Source du projet ; Porter un regard critique sur les acquis du stage ; Relater l'occupation du temps qu'il a consacré à ce stage Open Source. A l'issue du stage, l'étudiant sera capable de : Présenter sous une  forme synthétique (par exemple une page web) : le projet auquel il a contribué, sa contribution à ce projet et au moins un aspect (technique ou méthodologique) de l'approche Open Source qui s'applique particulièrement bien à sa contribution",
        "content": "Le choix du projet Open Source est libre.  Avant de se lancer dans le projet, il est cependant demandé  à l’étudiant·e d’envoyer aux titulaires une courte description du projet Open Source choisi ainsi que les contributions visées.  Cette description devra ensuite être validée par les enseignants.",
        "teaching_methods": "Le développement se réalisera au sein de la communauté Open Source du projet choisi par l’étudiant·e.",
        "assessment_methods": "Au terme du projet, l’étudiant·e rédigera un rapport tel que décrit dans les acquis d’apprentissage. Ce rapport sera envoyé avant le début de la session d’examen aux enseignants.  Ce rapport fera l’objet d’une discussion avec les enseignants.",
        "responsible_entity": "INFO"
    },
    {
        "url": "https://uclouvain.be/cours-2024-linfo2241",
        "title": "Architecture and performance of computer systems",
        "credits": "6.00",
        "hours": "30.0 h + 30.0 h",
        "quadrimester": "Q1",
        "teachers": [
            "Barbette Tom"
        ],
        "teaching_language": "Anglais",
        "topics_covered": "Organisation des systèmes d'exploitation Architecture d'un processeur moderne Parallélisme des instructions et des données Gestion des périphériques par le système d'exploitation Gestion des dispositifs de stockage par le système d'exploitation Virtualisation Évaluation et amélioration des performances de systèmes informatiques",
        "learning_outcomes": "A la fin de cette unité d’enseignement, l’étudiant est capable de : 1 Eu égard au référentiel AA du programme « Master ingénieur civil en informatique », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : INFO1.1-3 INFO2.4-5 INFO5.2-5 INFO6.1, INFO6.3 Eu égard au référentiel AA du programme « Master [120] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : SINF1.1-3 SINF2.4-5 SINF5.2-5 SINF6.1, SINF6.3 Eu égard au référentiel AA du programme « Master [60] en sciences informatiques », ce cours contribue au développement, à l'acquisition et à l'évaluation des acquis d'apprentissage suivants : 1SINF1.M1 1SINF1.M2 1SINF2.4-5 1SINF5.2-5 1SINF6.1, 1SINF6.3 Les étudiants ayant suivi avec fruit ce cours seront capables de : comparer différentes réalisations pour les systèmes d'exploitation et mettre en avant les avantages et inconvénients de ces réalisations expliquer les interactions entre le système d'exploitation et le matériel (stockage, réseau, virtualisation) évaluer les performances d'un système informatique identifier les facteurs qui limitent les performances d'un système informatique",
        "content": "Le cours apprendra à l'étudiant à évaluer les performances d'un système informatique en faisant des mesures, en mettant en place des simulations et/ou en modélisant mathématiquement un système. Pour ce faire, l'étudiant apprendra et mettra en pratique les techniques suivantes : concepts généraux sur la mesure de performance les métriques de performance la caractérisation des charges de travail la visualisation et le résumé des données les moniteurs et le profilage d'un logiciel et du système d'exploitation une introduction à la théorie des files d'attentes* ... Le cours approfondira les connaissances sur l'architecture des systèmes informatiques développées dans les précédents cours pour comprendre les observations faites avec les techniques susmentionnées et écrire des programmes plus efficaces : le fonctionnement du CPU des caches et de la mémoire virtuelle le parallélisme des instructions et des données le fonctionnement des périphériques et des drivers les systèmes de fichiers et périphériques de stockage la virtualisation ... Cette unité d’enseignement aborde des questions liées au développement durable et à la transition à travers des modules de cours dédiés à des thématiques telles que : l'efficacité énergétique des programmes l'énergie grise des systèmes informatique ... Le cours est également un cours d'intégration des connaissances en informatique. Il amènera l'étudiant à mélanger les concepts vu précédemment en réseaux, systèmes, programmation, électroniques et mathématiques pour raisonner autour d'un système complet et intégré. *Cette thématique pourrait être supprimée ou remplacée par un sujet pertinent en fonction de l'avancement du cours et l'intérêt des étudiants.",
        "teaching_methods": "Le cours consiste en une série de leçons, d'exercices d'accompagnement, et un projet en plusieurs phases, parfois seules et parfois en groupe. Certaines séances de répétitions sont consacrées au lancement du projet. La participation est vivement conseillée à toutes les activités, et particulièrement à ces séances de lancement pour éviter de perdre du temps sur l'installation d'un environnement de programmation adapté aux phases du projet. Le cours propose diverses activités ludiques tels des wooclaps, des quizz, des compétitions ou encore l'acquisition de badges afin de stimuler l'apprentissage.",
        "assessment_methods": "Mode d'évaluation pour la session de janvier: Projet (50% de la note finale) Participation (5% de la note finale) Examen (45% de la note finale) Le projet se fera en plusieurs phases qui contribueront à la note finale du projet. La côte de participation ne peut pas être récupérée en cas d'échec à la session de janvier et sera gardée pour la session d'août. Si l'étudiant·e n'obtient pas au moins 50% du total des points totaux du cours à la session de janvier, il/elle peut répéter uniquement la partie (ou les parties) échouée (examen et/ou l'ensemble du projet) à la session d'août. Cependant, dans ce cas, le projet doit être réalisé seul et un nouveau sujet peut être assigné. Le projet ne sera pas plus facile ou simplifié en août pour autant. L'ensemble du projet devra être réalisé à nouveau, même si l'étudiant n'échoue qu'à certaines phases, mais que la moyenne totale des projets est inférieure à 50%. L’usage des IA génératives telles que ChatGPT, Consensus, Perplexity,... est interdit. L’évaluation continue comporte des travaux/devoirs, qui donneront lieu à une note globale unique, communiquée à la fin du dernier travail/devoir. Le non-respect des consignes méthodologiques définies sur moodle, notamment en matière d’utilisation de ressources en ligne ou de collaboration entre étudiant.es, pour tout travail/devoir entraînera une note globale de 0 pour les projets et/ou la participation.",
        "other_info": "Connaissances de base: concepts de base de l'architecture des ordinateurs et des systèmes d'exploitation (LINFO1252) réseaux informatiques (organisation et protocoles) (LINGI1341) Il n'est pas souhaitable de passer ces cours en même temps. Les étudiants sont invités à passer le test de prérequis sur le moodle du cours ( https://moodle.uclouvain.be/course/view.php?id=8590 , l'étudiant peut s'inscrire sur moodle uniquement pour passer le test).",
        "online_resources": "Les supports du cours seront donnés via Moodle. Le cours propose des tests, quizz et jeux interactifs pour tester les connaissances de l'étudiant et aider à la révision sur Moodle également. Certains exercices et la soumission d'une partie des différentes phases du projet pourrait se faire sur la plateforme INGInious. De façon générale, la plateforme INGInious est toujours intégrée à Moodle dans ce cours. Les supports de cours listés ci-dessous sont optionnels et uniquement destinés à un approfondissement des connaissances. Les techniques apprisent lors des activités d'apprentissage, les supports de cours, d'exercices et autres ressources fournies via Moodle ainsi que les communications orales de l'équipe d'enseignement constituent la matière d'examen.",
        "course_materials": "R. Jain, \"The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling,\" Wiley- Interscience, New York, NY, April 1991, ISBN:0471503361. D. Patterson, J. Hennessy, \"Computer Organization and Design: The Hardware/Software Interface\" - 6th edition - 978-0128201091 (older editions are fine too) D. Patterson, J. Hennessy, \"Computer Architecture A Quantitative Approach\", Tenth Edition - ISBN 978-1-118-06333-0 (older editions are fine too)",
        "responsible_entity": "INFO"
    }
]